#!/usr/bin/env bash

# utils.shlib

die () {
  _arg_count="$#"
  if [[ _arg_count -eq 1 ]]; then
    printf -- "%s\n" "$1"
  elif [[ _arg_count -gt 1 ]]; then
    local _format=$1
    shift
    printf -- "${_format}" "$@"
  fi
  exit 1
}

show_help () {
  local _script_path=${1:?}
  local _filename=${2:?}
  cat ${_script_path}/help/${_filename}.help
}

is_harbor_container () {
  local _arg_size="$#"
  if [[ "$_arg_size" != 1 ]]; then
    die "ERROR: is_harbor_container takes exactly one argument.\n"
  fi
  printf -- "%s" "$(harbor ps --all --quiet --filter name=$1)"
}

is_harbor_image () {
  local _arg_size="$#"
  if [[ "$_arg_size" != 1 ]]; then
    die "ERROR: is_harbor_image takes exactly one argument.\n"
  fi
  printf -- "%s" "$(harbor image ls --all --quiet --filter name=$1)"
}

generate_random_word_combo () {
	local _first_list=${1:?}
	local _second_list=${2:?}
  local _first_lines=""
  local _second_lines=""
  local _first_random=""
  local _second_random=""
  local _first_word=""
  local _second_word=""
  local _combo=""

  _first_lines="$(cat ${_first_list} | wc -l)"
  _second_lines="$(cat ${_second_list} | wc -l)"

  _first_random=$((${RANDOM} % ${_first_lines}))
  _second_random=$((${RANDOM} % ${_second_lines}))

	_first_word=$(sed -n ${_first_random}p "${_first_list}")
  _second_word=$(sed -n ${_second_random}p "${_second_list}")

  if [[ "${_first_word: -1}" = "-" ]] && [[ "${_second_word:0:1}" = "-" ]]; then
    _first_word=${_first_word%?}
    _combo="${_first_word}${_second_word}"
  elif [[ "${_first_word: -1}" = "-" ]] || [[ "${_second_word:0:1}" = "-" ]]; then
    _combo="${_first_word}${_second_word}"
  elif [[ "${_first_word}" = "${_second_word}" ]]; then
    _combo="$(generate_random_word_combo ${_first_list} ${_second_list})"
  elif [[ -z "${_first_word}" ]] || [[ -z "${_second_word}" ]]; then
    _combo="$(generate_random_word_combo ${_first_list} ${_second_list})"
  else
  	_combo="${_first_word}_${_second_word}"
  fi

  if [[ -z "$3" ]]; then
    printf -- "%s" "${_combo// /_}"
  else
    eval "$3=${_combo// /_}"
  fi

}

trim() {
  local var="$*"
  # remove leading whitespace characters
  var="${var#"${var%%[![:space:]]*}"}"
  # remove trailing whitespace characters
  var="${var%"${var##*[![:space:]]}"}"
  printf -- "%s" "$var"
}

get_token_count () ( set -f; set -- $1; echo $# )

get_last_word_in_string () {
  printf -- "%s" "$1 | awk '{print $NF}'"
}
